import React, { useState, useEffect } from 'react'
import './Quiz.css'

const Quiz = ({ onComplete }) => {
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [selectedAnswers, setSelectedAnswers] = useState({})
  const [isTransitioning, setIsTransitioning] = useState(false)
  const [showForm, setShowForm] = useState(false)
  const [formData, setFormData] = useState({ name: '', phone: '' })

  const questions = [
    {
      id: 1,
      question: "–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –≤—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?",
      options: [
        { value: "studio", label: "–°—Ç—É–¥–∏—è", image: "/plan-studio.jpg" },
        { value: "1room", label: "1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è", image: "/plan-1room.jpg" },
        { value: "2room", label: "2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è", image: "/plan-2room.jpg" },
        { value: "3room", label: "3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è", image: "/plan-3room.jpg" }
      ]
    },
    {
      id: 2,
      question: "–ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–¥–µ–ª–∫–∏ –≤—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?",
      options: [
        { value: "prefinish", label: "–ü—Ä–µ–¥—á–∏—Å—Ç–æ–≤–∞—è", image: "/finish-prefinish.jpg" },
        { value: "renovated", label: "–° —Ä–µ–º–æ–Ω—Ç–æ–º", image: "/finish-renovated.jpg" },
        { value: "different", label: "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", image: "/finish-different.jpg" }
      ]
    },
    {
      id: 3,
      question: "–ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± –ø–æ–∫—É–ø–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?",
      options: [
        { value: "mortgage", label: "–ò–ø–æ—Ç–µ–∫–∞", image: "/payment-mortgage.jpg" },
        { value: "state_mortgage", label: "–ò–ø–æ—Ç–µ–∫–∞ —Å –≥–æ—Å. –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", image: "/payment-state.jpg" },
        { value: "installment", label: "–†–∞—Å—Å—Ä–æ—á–∫–∞", image: "/payment-installment.jpg" },
        { value: "cash", label: "–ù–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç", image: "/payment-cash.jpg" },
        { value: "different", label: "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã", image: "/payment-different.jpg" }
      ]
    }
  ]

  const progress = Math.round((currentQuestion / questions.length) * 100)

  const handleAnswerSelect = (answer) => {
    setSelectedAnswers(prev => ({
      ...prev,
      [currentQuestion]: answer
    }))
    
    setIsTransitioning(true)
    
    setTimeout(() => {
      if (currentQuestion < questions.length - 1) {
        setCurrentQuestion(prev => prev + 1)
      } else {
        setShowForm(true)
      }
      setIsTransitioning(false)
    }, 3000)
  }

  const handleNext = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(prev => prev + 1)
    } else {
      setShowForm(true)
    }
  }

  const handlePrev = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(prev => prev - 1)
    }
  }

  const handleFormSubmit = async (e) => {
    e.preventDefault()
    
    const results = {
      answers: selectedAnswers,
      name: formData.name,
      phone: formData.phone,
      timestamp: new Date().toISOString()
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –±–æ—Ç
    try {
      const response = await fetch('https://api.telegram.org/bot<YOUR_BOT_TOKEN>/sendMessage', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: '<YOUR_CHAT_ID>',
          text: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å –∫–≤–∏–∑–∞:\n\n–ò–º—è: ${results.name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${results.phone}\n\n–û—Ç–≤–µ—Ç—ã:\n${JSON.stringify(results.answers, null, 2)}`
        })
      })

      if (response.ok) {
        alert('–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
        onComplete()
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error)
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    }
  }

  const formatPhone = (value) => {
    const numbers = value.replace(/\D/g, '')
    if (numbers.length === 0) return ''
    if (numbers.length <= 1) return `+7(${numbers}`
    if (numbers.length <= 4) return `+7(${numbers.slice(1)}`
    if (numbers.length <= 7) return `+7(${numbers.slice(1, 4)})${numbers.slice(4)}`
    if (numbers.length <= 9) return `+7(${numbers.slice(1, 4)})${numbers.slice(4, 7)}-${numbers.slice(7)}`
    return `+7(${numbers.slice(1, 4)})${numbers.slice(4, 7)}-${numbers.slice(7, 9)}-${numbers.slice(9, 11)}`
  }

  const handlePhoneChange = (e) => {
    const formatted = formatPhone(e.target.value)
    setFormData(prev => ({ ...prev, phone: formatted }))
  }

  if (showForm) {
    return (
      <div className="quiz-container">
        <div className="quiz-header">
          <div className="quiz-banner">
            –ü–æ–º–æ–∂–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –∏ –¥–æ–º, —á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ–¥—Ö–æ–¥–∏–ª–∏ –∏–º–µ–Ω–Ω–æ –ø–æ–¥ –≤–∞—à –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏
          </div>
        </div>
        
        <div className="quiz-content">
          <div className="quiz-left">
            <h2 className="quiz-question">–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–±–æ—Ä–∫—É –∫–≤–∞—Ä—Ç–∏—Ä, –∑–∞–ø–æ–ª–Ω–∏–≤ —Ñ–æ—Ä–º—É</h2>
            
            <div className="quiz-features">
              <p>–í –ú–∏–∫—Ä–æ—Ä–∞–π–æ–Ω–µ ¬´–°–∞–º–æ–ª—ë—Ç¬ª –æ—Ç DOGMA –µ—Å—Ç—å –≤—Å–µ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –∂–∏–∑–Ω–∏:</p>
              <ul>
                <li>–ê–º—Ñ–∏—Ç–µ–∞—Ç—Ä –ø–æ–¥ –æ—Ç–∫—Ä—ã—Ç—ã–º –Ω–µ–±–æ–º –Ω–∞ –±—É–ª—å–≤–∞—Ä–µ</li>
                <li>–í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∏ –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–π –ø–æ—Å—Ç –æ—Ö—Ä–∞–Ω—ã</li>
                <li>11 –ø–∞–≤–∏–ª—å–æ–Ω–æ–≤ —Ñ—É–¥–∫–æ—Ä—Ç–∞</li>
                <li>–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—à–µ—Ö–æ–¥–Ω—ã–π –±—É–ª—å–≤–∞—Ä 1,6 –∫–º</li>
                <li>9 –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞</li>
                <li>–ó–æ–Ω—ã –±–∞—Ä–±–µ–∫—é –∑–æ–Ω—ã —Å —Ç–µ–Ω–µ–≤—ã–º –Ω–∞–≤–µ—Å–∞–º–∏</li>
                <li>–î–æ—Ä–æ–≥–∏-–¥—É–±–ª—ë—Ä—ã</li>
              </ul>
            </div>
            
            <form onSubmit={handleFormSubmit} className="quiz-form">
              <div className="form-group">
                <label>–í–í–ï–î–ò–¢–ï –ò–ú–Ø</label>
                <input
                  type="text"
                  value={formData.name}
                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                  placeholder="–ò–º—è"
                  required
                />
              </div>
              
              <div className="form-group">
                <label>–í–í–ï–î–ò–¢–ï –¢–ï–õ–ï–§–û–ù</label>
                <div className="phone-input">
                  <div className="phone-prefix">
                    <span>üá∑üá∫</span>
                    <span>+7</span>
                  </div>
                  <input
                    type="tel"
                    value={formData.phone}
                    onChange={handlePhoneChange}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω *"
                    maxLength="18"
                    required
                  />
                </div>
              </div>
              
              <button type="submit" className="submit-button">
                –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
              </button>
              
              <div className="form-checkbox">
                <input type="checkbox" required />
                <span>–Ø —Å–æ–≥–ª–∞—à–∞—é—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</span>
              </div>
            </form>
          </div>
          
          <div className="quiz-right">
            <img src="/complex-image.jpg" alt="–ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å" />
          </div>
        </div>
        
        <div className="quiz-footer">
          <div className="quiz-brand">–°–æ–∑–¥–∞–π —Å–≤–æ–π <span>–º–∞—Ä–∫–≤–∏–∑</span></div>
        </div>
      </div>
    )
  }

  return (
    <div className="quiz-container">
      <div className="quiz-header">
        <div className="quiz-banner">
          –ü–æ–º–æ–∂–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –∏ –¥–æ–º, —á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ–¥—Ö–æ–¥–∏–ª–∏ –∏–º–µ–Ω–Ω–æ –ø–æ–¥ –≤–∞—à –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏
        </div>
      </div>
      
      <div className="quiz-content">
        <div className="quiz-left">
          <h2 className="quiz-question">{questions[currentQuestion].question}</h2>
          
          <div className="quiz-options">
            {questions[currentQuestion].options.map((option, index) => (
              <div
                key={index}
                className={`quiz-option ${selectedAnswers[currentQuestion] === option.value ? 'selected' : ''}`}
                onClick={() => handleAnswerSelect(option.value)}
              >
                <div className="option-radio">
                  <div className="radio-circle"></div>
                </div>
                <span>{option.label}</span>
              </div>
            ))}
          </div>
        </div>
        
        <div className="quiz-right">
          <div className="plans-grid">
            {questions[currentQuestion].options.map((option, index) => (
              <div key={index} className="plan-item">
                <img src={option.image} alt={option.label} />
                <div className="plan-label">{option.label}</div>
              </div>
            ))}
          </div>
        </div>
      </div>
      
      <div className="quiz-footer">
        <div className="progress-info">
          <span>–ì–æ—Ç–æ–≤–æ: {progress}%</span>
          <div className="progress-bar">
            <div className="progress-fill" style={{ width: `${progress}%` }}></div>
          </div>
        </div>
        
        <div className="quiz-brand">–°–æ–∑–¥–∞–π —Å–≤–æ–π <span>–º–∞—Ä–∫–≤–∏–∑</span></div>
        
        <div className="quiz-navigation">
          <button 
            className="nav-button prev" 
            onClick={handlePrev}
            disabled={currentQuestion === 0}
          >
            ‚Üê
          </button>
          <button 
            className="nav-button next" 
            onClick={handleNext}
            disabled={currentQuestion === questions.length - 1}
          >
            {currentQuestion === questions.length - 1 ? '–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥' : '–î–∞–ª–µ–µ ‚Üí'}
          </button>
        </div>
      </div>
    </div>
  )
}

export default Quiz
